Паттерны проектирования (Design Patterns) - решения часто встречающихся проблем в области разработки программного обеспечения.

ПОРОЖДАЮЩИЕ ПАТТЕРНЫ:

1. Фабричный метод - 

2. Патерн одиночка (Singleton)- используется для созданиия класса с единственным экземпляром

public class Singleton
{
	private Singleton(){}

	private static Singleton instance;

	private static Object lockObject = new Object(); // для многопоточного приложения

	public static Singleton getInstatnce()
	{
		if(instance == null)
		{
			lock(lockObject)
			{
				if(instance == null) // дополнительная проверка для второго потока
				{
					instance = new Singleton();
				}
			}
		}
		return instatnce;
	}
}

3. Абстрактная фабрика - паттерн, порождающий семейство объектов

4. патерн строитель - если создаем обьект по частям
5. патерн прототип - если создаем обьект путем копирования некоторго прототипа


СТРУКТУРНЫЕ ПАТТЕРНЫ:

1. патерн адаптер - когда надо срастить интерфейсы, создав класс-обертку
(когда класс не имеет доступа к интерфейсу, но очень надо)

2. Фасад - когда много классов связаны между собой, мы создаем один класс, через который они будут общаться,
но на прямую тоже можно общаться

близнецы:
3. Компоновщик (Composite) - Объединение объектов в древовидные структуры,
это когда есть единый интерфейс для объектов различного уровня (древовидной структуры) 
4. Декоратор (Decorator) - когда хотим добавить обьекту дополнительную функциональность

5. Мост (Bridge) - отделяет абстракцию/интерфейс от ее реализации, чтобы и то и другое можно было менять независимо

6. Приспособленец (Flyweight) - когда есть объект, состоящий из множества мелких объектов,
и вместо объевления каждого мелкого  объекта, создается pool приспособленцев;
делим объект на внутреннее и внешнее состояние => приспособленец

7. Заместитель (Proxy) - 3 ситуации использования:
- когда объект находится удаленно (по сети) "удаленный заместитель"
- объект загружается только по требованию "виртуальный заместитель"
- когда необходимо ограничить доступ юзера к целевому объекту "защищенный заместитель"

ПАТТЕРНЫ ПОВЕДЕНИЯ:

1. Стратегия - если создаем объект с изменяемым поведением
2. Итератор - если обьект представлен в виде коллекции, и нам необходим последовательный доступ к элементам

3. Наблюдатель - когда есть зависимость 1 ко многим и при изменении одного элемента надо сообщить всем остальным