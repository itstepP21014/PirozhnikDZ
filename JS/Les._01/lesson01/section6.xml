<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №1: Введение в JavaScript" next="section7.xml" prev="section5.xml" summ="0">
<h2>Принятие решений, выбор</h2>

<p>Все, что мы с вами рассмотрели в JavaScript до сих пор, позволяет нам реализовать лишь <strong>линейные</strong> алгоритмы, то есть алгоритмы, действия которых следуют строго одно за другим. Таким образом, наши скрипты "идут строго предначертанным маршрутом" и не могут "принимать решения".
</p>

<p>В данном разделе урока мы рассмотрим конструкции, позволяющие реализовать в скрипте принятие решений и выбор из множества альтернатив.
</p>

<h3>Конструкция ветвления "if ... else ..."</h3>
<p>Данная конструкция позволяет реализовать в скрипте принятие решения, основываясь на результате вычисления логического выражения (<code><kw>true</kw></code> или <code><kw>false</kw></code>). Общий вид конструкции представлен ниже:
</p>
<example>
<kw>if</kw>(<i>логическое_выражение</i>)
    <i>оператор_если_истина</i>
[
<kw>else</kw>&#160;
    <i>оператор_если_ложь</i>
]
</example>

<tip start="Примечание">в квадратные скобки взята необязательная часть конструкции.
</tip>

<p>При выполнении конструкции ветвления, JavaScript сначала проверяет значение выражения "<i>логическое_выражение</i>". Если "<i>логическое_выражение</i>" истино, выполняется оператор "<i>оператор_если_истина</i>". В противном случае выполняется оператор "<i>оператор_если_ложь</i>" или не выполняется ничего, если альтернативная ветвь конструкции ("else") отсутствует.
</p>

<p>В качестве "<i>оператор_если_истина</i>" и "<i>оператор_если_ложь</i>" может выступать либо один отдельный оператор, либо несколько операторов ограниченных спереди и сзади символами "{" и "}" (фигурные скобки), как показано ниже:
</p>
<example>
<kw>if</kw>(<i>логическое_выражение</i>)
{
    <i>оператор</i>;
    <i>оператор</i>;
    <i>оператор</i>;
    ...
}
</example>

<tip start="Примечание">символы "{" и "}" (фигурные скобки) называют "операторными скобками" или блочным оператором. Операторы, объединенные в такой блок можно рассматривать как один составной оператор.
</tip>

<p>Рассмотрим пример применения конструкции "if ... else ...":
</p>
<example number="1.9" title="применение конструкции ветвления" href="samples/if_example.html">
<kw>var</kw> var1=10;
<kw>var</kw> var2=0;
<kw>if</kw> (var2 != 0) {
    <kw>var</kw> result=var1/var2;
    <stdfunc>alert</stdfunc>(<str>"Результат деления: "</str>+result);
}
<kw>else</kw> {
    <stdfunc>alert</stdfunc>(<str>"Деление на 0 невозможно!"</str>);
}
</example>

<p>В данном примере конструкция "if ... else ..." используется для определения допустимости операции деления. Если делитель (переменная var2) не равен "0", скрипт выполняет деление переменной var1 на переменную var2 и выводит результат на экран. В случае недопустимости операции деления, выводится сообщение о невозможности деления на "0".
</p>

<p>Конструкция ветвления позволяет сделать выбор из двух альтернатив: переменная равна "0" или нет и т.п. Однако, встречаются случаи, когда необходимо сделать выбор из нескольких альтернатив. Например, переменная может принимать несколько фиксированных значений ("1", "2", "3" и т.п.) в зависимости от которых необходимо направлять программу по разным маршрутам. В таких случаях можно скомбинировать несколько конструкций ветвления следующим образом:
</p>
<example>
<kw>if</kw>(<i>логическое_выражение_1</i>)
{
    <i>оператор_1</i>&#160;
}
<kw>else</kw>&#160;<kw>if</kw>(<i>логическое_выражение_2</i>)
{
    <i>оператор_2</i>&#160;
}
<kw>else</kw>&#160;<kw>if</kw>(<i>логическое_выражение_3</i>)
{
    <i>оператор_3</i>
}
...
</example>

<p>Рассмотрим простой пример: вычисление подоходного налога. Предположим (я не знаю точных данных, извините), что, если доход сотрудника не более 180 грн, налог не взимается; если доход сотрудника от 180 до 500 грн, налог составляет 1%; если доход сотрудника от 500 до 2500 грн, налог составляет 2%; если доход сотрудника превышает 2500 грн, налог составляет 3%. Листинг скрипта приводится ниже:
</p>
<example number="1.10" title="вычисление подоходного налога" href="samples/nalog.html">
<kw>var</kw> dohod=<stdfunc>parseInt</stdfunc>(<stdfunc>prompt</stdfunc>(<str>"Введите ваш доход:"</str>, <num>500</num>));
<kw>var</kw> nalog=<num>0</num>;
<kw>if</kw>(dohod&gt;<num>180</num> &amp;&amp; dohod&lt;=<num>500</num>) {
    nalog=dohod*<num>0.01</num>;
}
<kw>else</kw>&#160;<kw>if</kw>(dohod&gt;<num>500</num> &amp;&amp; dohod&lt;=<num>2500</num>) {
    nalog=dohod*<num>0.02</num>;
}
<kw>else</kw>&#160;<kw>if</kw>(dohod&gt;<num>2500</num>) {
    nalog=dohod*<num>0.03</num>;
}
<stdfunc>alert</stdfunc> (<str>"Подоходный налог составит "</str>+nalog+<str>" грн"</str>);
</example>


<h3>Конструкция выбора "switch ... case ... default ..."</h3>
<p>Конструкция выбора используется в тех случаях, когда приходится делать выбор из множества альтернатив. Ниже представлен общий вид конструкции:
</p>
<example>
<kw>switch</kw>(<i>ключевое_выражение</i>)
{
    <kw>case</kw>&#160;<i>значение_1</i>:
        <i>оператор</i>;
        <i>оператор</i>;
        ...
       [<kw>break</kw>;]
    <kw>case</kw>&#160;<i>значение_2</i>:
        <i>оператор</i>;
        <i>оператор</i>;
        ...
       [<kw>break</kw>;]
    ...
   [<kw>default</kw>:
        <i>оператор</i>;
        <i>оператор</i>;
        ...
   ]
}
</example>
<tip start="Примечание">в квадратные скобки взята необязательная часть конструкции.
</tip>

<p>Принцип работы данной конструкции достаточно прост. Сначала вычисляется значение выражения <i>ключевое_выражение</i>. Затем проверяются последовательно блоки <code><kw>case</kw>&#160;<i>значение_x</i>:</code>. Если значение выражения равно значению, заданному в текущем блоке <code><kw>case</kw></code>, выполняются операторы данного блока до оператора <code><kw>break</kw></code>. Если оператор <code><kw>break</kw></code> в текущем блоке не присутствует, выполняются операторы следующего за текущим блока <code><kw>case</kw></code>. Если значению ключевого выражения не соответствует ни один из перечисленных блоков <code><kw>case</kw></code>, выполняются операторы блока <code><kw>default</kw></code> (если он указан).
</p>

<p>Существует ограничение, накладываемое на применение конструкции выбора: <b>конструкция выбора применяется только в тех случаях, когда необходимо проверить значение ключевого выражения на равенство одному из фиксированных значений</b>. C ее помощью нельзя, например, проверить принадлежность числа определенному диапазону (для этого используйте конструкцию ветвления - "if").
</p>

<p>Рассмотрим пример применения конструкции выбора:
</p>
<example number="1.11" title="применение конструкции выбора" href="samples/switch.html"> 
<kw>var</kw> name=prompt(<str>"Введите свое имя:"</str>, <str>"Вася"</str>);
<kw>var</kw> pol=prompt(<str>"Введите пол (м/ж):"</str>, <str>"м"</str>);

<kw>switch</kw> (pol) {
    <kw>case</kw> <str> "м"</str>: 
    <kw>case</kw> <str> "m"</str>: 
        alert(<str>"Мои приветствия, пан "</str>+name);
        <kw>break</kw>;
    <kw>case</kw> <str> "ж"</str>: 
    <kw>case</kw> <str> "f"</str>: 
        alert(<str>"Мои приветствия, пани "</str>+name);
        <kw>break</kw>;
    <kw>default</kw>:
        alert(<str>"Хм-м-м?.."</str>);
}
</example>

<p>Как видно из примера, скрипт реализует одинаковую реакцию на пары значений "м" и "m", а, так же, "ж" и "f" переменной pol. Остальные значения считаются неопределенными и встречаются удивленным "Хм-м-м?..".
</p>

</lesson>
