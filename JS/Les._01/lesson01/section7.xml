<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №1: Введение в JavaScript" next="section8.xml" prev="section6.xml" summ="0">
<h2>Циклы</h2>
<p><i>Циклом</i> в программировании называется многократное повторение некоторых операторов. Необходимость циклов несомненна. Например, нужно вычислить сумму целых чисел в некотором диапазоне, указанном пользователем, или найти факториал числа. Без циклов решение таких задач невозможно.
</p>

<p>В JavaScript реализовано 3 вида циклов, рассматриваемых ниже.
</p>

<h3>Цикл со счетчиком "for"</h3>
<p>Этот тип цикла применяется в тех случаях, когда количество повторений известно заранее. Синтаксис конструкции "for" представлен ниже:
</p>
<example>
<kw>for</kw>([<i>инициализация_счетчика</i>];[<i>условие</i>];[<i>приращение_счетчика</i>])
{
    <i>оператор;</i>&#160;
    <i>оператор;</i>&#160;
    ...
}
</example>
<tip start="Примечание">в квадратных скобках "[]" указаны необязательные части конструкции.</tip>

<p>Итак:
</p>
<ul>
	<li><i>инициализация_счетчика</i> - выражение, инициализирующее переменную - счетчик цикла. Может быть опущено, в случае, если переменная была проинициализированна до цикла.</li>
	<li><i>условие</i> - условие на значение счетчика цикла. Пока условие истинно, цикл выполняется.</li>
	<li><i>приращение_счетчика</i> - выражение, определяющее изменение (инкремент или декремент) счетчика на каждой итерации цикла.</li>
</ul>

<p>Операторы, указанные в "{}" называются <i>телом цикла</i>.
</p>

<p>Рассмотрим пример применения цикла "for" для вычисления суммы чисел от "1" до заданного переменной "upperLimit":
</p>
<example number="1.8" title="сумма чисел в диапазоне" href="samples/summ.html">
<kw>var</kw> upperLimit=<num>20</num>; <comment>//предел</comment>&#160;
<kw>var</kw> counter; <comment>//счетчик</comment>&#160;
<kw>var</kw> summ=<num>0</num>; <comment>//сумма</comment>&#160;

<kw>for</kw>(counter=<num>1</num>; counter&lt;=upperLimit; counter++)
{
    summ+=counter; <comment>//накапливаем сумму</comment>&#160;
}
<stdfunc>alert</stdfunc>(<str>"Сумма чисел от 1 до "</str>+upperLimit+<str>": "</str>+summ);
</example>

<p>В примере объявляется переменная "upperLimit" со значением "20" - верхний предел вычислений. Переменная "counter" играет роль счетчика, увеличивающегося на 1 с каждой итерацией. В каждой итерации цикла текущее значение счетчика добавляется к переменной "summ". Таким образом, по окончании цикла, переменная "summ" будет содержать сумму чисел от 1 до 20 с шагом 1.
</p>

<h3>Цикл с предусловием "while"</h3>
<p>Синтаксис:
</p>
<example>
<kw>while</kw>(<i>условие_продолжения</i>)
{
    <i>оператор;</i>&#160;
    <i>оператор;</i>&#160;
    ...
}
</example>

<p>Принцип функционирования данной конструкции достаточно прост: сначала проверяется значение логического выражения <i>условие_продолжения</i>; если оно истино, выполняется тело цикла, иначе, управление передается первому оператору, следующему за циклом (после символа "}"). Именно поэтому цикл "while" и называют циклом с "предусловием".
</p>
<p>Будьте внимательны при построении условия продолжения цикла - если поставить заведомо неверное условие, тело цикла не выполнится ни разу!
</p>

<p>Цил "while" применяется чаще всего в тех случаях, когда точное количество повторений неизвестно. Однако, его можно применять так же, как цикл "for". Следующий пример аналогичен примеру, описанному в листинге 1.8 - "сумма чисел в диапазоне":
</p>
<example number="1.9" title="сумма чисел в диапазоне">
<kw>var</kw> upperLimit=<num>20</num>; <comment>//предел</comment>&#160;
<kw>var</kw> counter; <comment>//счетчик</comment>&#160;
<kw>var</kw> summ=<num>0</num>; <comment>//сумма</comment>&#160;

counter=<num>1</num>;
<kw>while</kw>(counter&lt;=upperLimit)
{
    summ+=counter; <comment>//накапливаем сумму</comment>&#160;
    counter++; <comment>//инкремент счетчика</comment>&#160;
}
<stdfunc>alert</stdfunc>(<str>"Сумма чисел от 1 до "</str>+upperLimit+<str>": "</str>+summ);
</example>

<p>В результате мы получим тот же ответ, что и в предыдущем примере. Как вы можете видеть, обе структуры, хоть в целом и похожи, имеют ряд отличий:
</p>
<ul>
	<li>инициализация счетчика выполняется до цикла;</li>
	<li>инкремент счетчика выполняется как оператор в теле цикла.</li>
</ul>

<p></p>

<h3>Цикл с постусловием "do ... while"</h3>
<p>Синтаксис:
</p>
<example>
<kw>do</kw>
{
    <i>оператор;</i>&#160;
    <i>оператор;</i>&#160;
    ...
}
<kw>while</kw>(<i>условие_продолжения</i>)
</example>

<p>Принцип функционирования: на каждой итерации сначала выполняются операторы тела цикла, а, затем, проверяется значение выражения <i>условие_продолжения</i>. Если выражение имеет значение "истина", переходим к следующей итерации, иначе, управление передается первому оператору, следующему за циклом. 
</p>

<p>Таким образом, цикл с постусловием выполняет тело цикла как минимум 1 раз.
</p>

<h3>Управление циклом</h3>
<p>В JavaScript циклами можно управлять с помощью двух операторов:
</p>
<ul>
	<li><code><kw>break</kw></code> - прерывает выполнение цикла и передает управление на следующий после цикла оператор.</li>
	<li><code><kw>continue</kw></code> - прерывает текущую итерацию цикла и передает управление на первый оператор тела цикла для новой итерации.</li>
</ul>

<p>Рассмотрим простой пример: скрипт запрашивает у пользователя числа при помощи метода "prompt" и суммирует их. Если число = 0, текущая итерация прерывается и повторяем шаг 1. Если число отрицательное, вычисления завершаются.
</p>

<example number="" title="применение break и continue" href="samples/break_contin.html">
<kw>var</kw> number, summ = <num>0</num>;
<kw>do</kw> {
	number = parseInt (prompt (<str>"Введите число:"</str>, <num>10</num>));
	<kw>if</kw> (number == <num>0</num>)
		<kw>continue</kw>;
	<kw>if</kw> (number &lt; <num>0</num>)
		<kw>break</kw>;

	summ += number;
}
<kw>while</kw> (<kw>true</kw>) <comment>// бесконечный цикл</comment>
alert (<str>"Сумма введенных чисел = "</str>+summ);
</example>

<p>Этот пример примечателен, так же, тем, что он наглядно демонстрирует практическое применение бесконечного цикла в программировании. Почему приведенный цикл считается бесконечным? Дело в том, что  условие продолжения  цикла - логический литерал <code><kw>true</kw></code> - всегда принимает истинное значение. Следовательно - цикл будет продолжаться бесконечно.
</p>

</lesson>
