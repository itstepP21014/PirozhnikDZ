<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №1: Введение в JavaScript" next="section3.xml" prev="section1.xml" summ="0">
<h2>Начальные сведения. Синтаксис</h2>
<p>Из курса C++ вам должно быть известно, что <strong>синтаксисом</strong> называются правила построения конструкций языка программирования, в соответствии с которыми пишется исходный код программы или сценария. Для более легкого понимания можно воспользоваться простой аналогией из повседневной жизни. Возьмем два любых слова, например - "читать" и "книга". Нам известно, что слово "читать" - обозначает действие, а слово "книга" - обозначает некоторый предмет (объект). Мы можем связать эти слова, используя правила родного языка (великого и могучего) и получить, например, фразу "читать книгу", в то время, как "книга читать" похожа, скорее, на (простите) чукотский вариант произношения данной фразы. Так и в любом языке программирования существуют правила, определяющие, каким образом связывать "слова" и разделять "предложения". В данном разделе урока мы с ними познакомимся. Однако, для начала, стоит задать себе несколько вопросов:
</p>
<ul>
	<li>Что нам понадобится для написания и выполнения скриптов?</li>
	<li>Где размещать текст сценария?</li>
</ul>

<h3>Инструментальные средства</h3>
<p>Так как инструкции JavaScript чаще всего записываются непосредственно в HTML файле страницы, то для написания сценария подойдет обыкновенный текстовый редактор (например - "блокнот" Windows). Для выполнения сценариев необходим web-браузер, который, я думаю, имеется у каждого пользователя ОС Windows. Как вы догадались, речь идет о <strong>Microsoft Internet Explorer</strong> - именно для данного браузера мы и будем писать наши скрипты (вопросы, посвященные работе скриптов в остальных популярных браузерах, таких как Opera, Mozilla или Netscape Navigator, будут рассмотрены нами позже в данном курсе).
</p>
<p>Кроме "блокнота", существует множество редакторов, специально созданных для написания HTML страниц и сценариев: <strong>Microsoft Visual Interdev</strong> (версии 6 или 7), <strong>VisicomMedia AceHTML 5 Pro</strong> и т.п. При использовании таких специализированных инструментальных средств вы получите ряд преимуществ: выделение цветом элементов кода (ключевых слов, строк, чисел и т.д.), всплывающие подсказки, отображающие аргументы функций, автоматическая вставка или выбор из списка известных языковых конструкций (вы пишете <code>docu</code>, нажимаете <kbshort title="Автозавершение или список">Ctrl+Пробел</kbshort> и получаете <code>document</code>), шаблоны кода и т.п. Наиболее мощным редактором в этом плане является <strong>Microsoft Visual Interdev 7</strong>, входящий в поставку <strong>Microsoft Visual Studio 7</strong>, однако, для установки этого програмного пакета требуется не менее 1 гигабайта (!!!) на жестком диске. <strong>AceHTML 5 Pro</strong> требует значительно меньше места (несколько десятков мегабайт), но обладает меньшими функциональными возможностями. Так что выбор за вами, тем более, что пользоваться обоими редакторами достаточно просто.
</p>

<h3>Размещение сценария</h3>
<p>Разобравшись с редакторами и браузером, можно приступать к следующему вопросу: "Где (в каком месте страницы) писать команды JavaScript?". Здесь есть несколько вариантов или подходов:
</p>
<ul>
	<li>во-первых, скрипт может быть записан непосредственно в тексте страницы;</li>
	<li>во-вторых, скрипт может быть загружен из внешнего по отношению к html странице файла.</li>
</ul>
<tip start="Примечание">команды JavaScript можно записывать так же и в обработчиках событий элементов, однако, тема обработки событий в данном уроке не рассматривается - этим вопросом мы займемся позже, когда вы в достаточной мере овладеете основами языка.
</tip>
<p>В обоих перечисленных выше случаях используется элемент <code>&lt;<tag>script</tag>&gt;</code>, располагаемый в заголовке или теле страницы (см. выделенные строки примера):
</p>	
<example>
&lt;<tag>html</tag>&gt;
    &lt;<tag>head</tag>&gt;
        <highlight>&lt;<tag>script</tag> <attr> type</attr>=<str>"text/javascript"</str> <attr> src</attr>=<str>"../common/script.js"</str>&gt;&lt;/<tag>script</tag>&gt;</highlight>
        ...
    &lt;/<tag>head</tag>&gt;
    &lt;<tag>body</tag>&gt;
        <highlight>&lt;<tag>script</tag> <attr> type</attr>=<str>"text/javascript"</str>&gt;</highlight>
            текст сценария
        <highlight>&lt;/<tag>script</tag>&gt;</highlight>
        ...
    &lt;/<tag>body</tag>&gt;
&lt;/<tag>html</tag>&gt;
</example>
	<p>Стартовый тэг элемента <code>&lt;<tag>script</tag>&gt;</code> может иметь насколько атрибутов:</p>
	<ul>
		<li><code><attr>type</attr></code> - указывает язык программирования, на котором написан текст сценария. Для использования в качестве языка сценария JavaScript необходимо присвоить данному атрибуту значение <code><str>"text/javascript"</str></code></li>.
		<li><code><attr>src</attr></code> - позволяет указать адрес файла, содержащего текст сценария. Файл должен иметь расширение ".js" и содержать <strong>только строки сценария</strong> и никакой HTML разметки!</li>
	</ul>
<p>В случае, когда элемент <code>&lt;<tag>script</tag>&gt;</code> содержит атрибут <code><attr>src</attr></code> текст сценария берется из указанного файла, а содержимое самого элемента игнорируется. Такой подход используют в тех случаях, когда необходимо централизовать общий для нескольких страниц сценарий - это экономит размер страниц, а, так же, упрощает модификацию сценария.</p>

<p>Зачастую не имеет значения, в каком месте документа расположен сценарий (в заголовке или в теле страницы). Стандарты HTML рекомендуют размещать элемент <code>&lt;<tag>script</tag>&gt;</code> в разделе заголовка страницы, однако есть несколько исключений:
</p>
<ul>
	<li>если сценарий предназначен для размещения данных на странице, его следует размещать в теле страницы;</li>
	<li>если сценарий обращается к элементу страницы, он должен размещаться после данного элемента;</li>
	<li>элементы HTML могут содержать операторы JavaScript в качестве значения атрибута (например - обработчики событий);</li>
</ul>


<h3>Синтаксис</h3>
<p>В данной части урока речь пойдет даже не о синтаксисе (по сути дела синтаксис мы будем изучать на протяжении всего курса), а о правилах, соблюдение которых избавит вас от многих возможных ошибок:
</p>
<ul>
	<li>JavaScript чувствителен к регистру символов. Это означает, что имена <code>Name</code> и <code>name</code> представляют собой совершенно разные имена переменных или функций. Чувствительность к регистру касается как стандартных, так и пользовательских элементов сценария.</li>
	<li>Операторы должны разделяться между собой символом "<code>;</code>", хоть это и не является обязательным.</li>
	<li>Операторы могут объединяться в блоки. Для этого их следует размещать в фигурных скобках: "<code>{</code>" и "<code>}</code>". В этом случае несколько операторов рассматриваются интерпретатором и выполняются как один составной оператор. При этом разделитель "<code>;</code>" после блока не ставится.</li>
	<li>В текст скрипта можно включать комментарии. Однострочный комментарий начинается с символов "<code>//</code>" и действует до конца строки. Блочный комментарий начинается с символов "<code>/*</code>" и заканчивается символами "<code>*/</code>":</li>
</ul>
<example>
<comment>// однострочный комментарий
</comment>
<comment>
/*
   блочный
   комментарий
*/</comment>
</example>
<tip start="Совет">комментарии не рассматриваются интерпретатором, поэтому их можно использовать для временного сокрытия участков кода при отладке или внесении изменений. Кроме того полезно комментировать участки кода - это делает текст сценария более понятным и облегчает поиск требуемых фрагментов.
</tip>

<h3>Работа с браузерами, не поддерживающими JavaScript</h3>
<p>На сегодняшний день все популярные браузеры поддерживают JavaScript. Однако остается вероятность (пусть небольшая), что кто нибуть будет просматривать вашу страницу браузером, не имеющем поддержки JavaScript. Так же, эту поддержку в любом браузере можно отключить и включить, при необходимости.
</p>
<p>Если браузер не поддерживает JavaScript, то содержимое элемента <code>&lt;<tag>script</tag>&gt;</code> не будет интерпретировано, а будет выведено на страницу в виде текста. Такое поведение браузера будет не совсем корректным и этого необходимо избегать. Для этого текст скрипта помещают в блок HTML комментария следующим образом:
</p>
<example>
&lt;<tag>script</tag> <attr> type</attr>=<str>"text/javascript"</str>&gt;
&lt;!--
    текст сценария
<comment>//--&gt;</comment>
&lt;/<tag>script</tag>&gt;</example>

<p>Браузеры, поддерживающие JavaScript, комментарии просто игнорируют. А для браузера, не имеющего поддержки JavaScript, текст сценария будет обыкновенным комментарием и просто не будет выводиться на страницу.
</p>
<p>Кроме того, можно вывести на страницу текст сообщения, говорящий о том, что браузер не имеет поддержки JavaScript. Для Этого текст сообщения размещают в элементе <code>&lt;<tag>noscript</tag>&gt; ... &lt;/<tag>noscript</tag>&gt;</code>. Ниже представлен пример, демонстрирующий классический подход к решению проблемы поддержки сценариев:
</p>
<example number="1.1" title="Решение проблемы поддержки сценариев в браузере">
&lt;<tag>script</tag>&gt;
&lt;!--
    текст сценария
<comment>//--&gt;</comment>
&lt;/<tag>script</tag>&gt;
...
&lt;<tag>noscript</tag>&gt;
    &lt;<tag>h3</tag>&gt;Убедитесь, что ваш браузер поддерживает JavaScript 
    и в свойствах браузера разрешено выполнение сценариев!&lt;/<tag>h3</tag>&gt;
    Вы так же можете перейти по &lt;<tag>a</tag> <attr> href</attr>=<str>"no-scripts.html"</str>&gt;этой ссылке&lt;/<tag>a</tag>&gt; 
    на вариант страницы, без скриптов.
&lt;/<tag>noscript</tag>&gt;
</example>

<p>Как вы можете видеть, в элементе <code>&lt;<tag>noscript</tag>&gt;</code> можно использовать HTML разметку. Это дает нам возможность вывести гиперссылку, при щелчке на которой, пользователь перейдет на страницу, не содержащую сценариев. 
</p>

<h3>Простой пример</h3>
<p>Для закрепления полученных сведений и демонстрации работы JavaScript, предлагаю написать простой пример, выдающий на экран диалоговое окно с некоторым текстом. Учтите, что тех знаний JavaScript, что вы получили в данном разделе урока, недостаточно для написания даже простого примера. Поэтому примите новые для вас сведения "на веру", а к концу данного урока вы и сами будете способны создавать такие (и даже более сложные) скрипты.
</p>

<example number="1.2" title="Пример применения JavaScript" href="samples/helloworld.html">
&lt;<tag>html</tag>&gt;
    &lt;<tag>body</tag>&gt;
        &lt;<tag>script</tag> <attr> type</attr>=<str>"text/javascript"</str>&gt; 
            <comment>//объявление переменной строкового типа с именем "message"</comment>&#160;
            <keyword>var</keyword> message=<str>"Hello World!!!"</str>;
            <stdfunc>alert</stdfunc>(message);<comment>// вывод диалогового окна с текстом</comment>&#160;
        &lt;/<tag>script</tag>&gt;
    &lt;/<tag>body</tag>&gt;
&lt;/<tag>html</tag>&gt;
</example>

<p>В данном примере объявляется переменная "message" и ей присваивается значение <str>"Hello World!!!"</str>. Следующая строка скрипта выводит значение переменной на экран в диалоговом окне (функция <cpde><stdfunc>alert</stdfunc></cpde>). С переменными и диалоговыми окнами вы познакомитесь далее в уроке. 
</p>

</lesson>