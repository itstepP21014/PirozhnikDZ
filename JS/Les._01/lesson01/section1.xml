<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №1: Введение в JavaScript" next="section2.xml" prev="index.xml" summ="1">

<h2>Введение</h2>
<h3>Что такое JavaScript</h3>

<p>Большинство рядовых пользователей столкнулись с WWW в середине 90-х годов. Прошло еще совсем немного времени, и многие из них осознали тот, несомненно, приятный факт, что они <i>могут создавать web-страницы самостоятельно</i>!
</p>
<p>
Что же приятного в этой возможности? Давайте трезво взглянем на вещи. Для того, чтобы заявить о себе если не всему миру (будем скромнее), то определенному широкому кругу людей, можно воспользоваться либо радио, либо телевидением, либо прессой. В любом из вышеперечисленных случаев необходимо привлечь к решению задачи группу специалистов, обладающих необходимыми знаниями в выбранной области. Можно, конечно, обойтись и без специалистов, если вы сами специалист. Но есть и еще ряд "проблем": оборудование и система распространения. Сделаем один простой вывод: для создания и распространения информации с помощью вышеперечисленных средств необходимо как минимум <i>очень много денег</i>.
</p>
<p>C внедрением www "в массы" ситуация на этом фронте кардинально изменилась. Изучение языка разметки, при помощи которого создавались web-страницы - <strong>HTML</strong>, оказалось по силам практически каждому. HTML поддерживается мощнейшей системой распространения - <strong>Internet</strong>. А для размещения страницы (сайта) в Internet в наше время денег или совсем не требуется, или их нужно сравнительно немного (в последнем случае возможности по созданию и обслуживанию web-страницы значительно расширяются). 
</p>
<p>Спустя еще некоторое время жестокая реальность расставила "все точки над ё". Оказалось, что для создания действительно привлекательного и часто посещаемого web-узла одних знаний HTML просто недостаточно. Кроме интересного, полезного содержания, узел должен обладать приятным оформлением, а для этого необходим неплохой художественный вкус, если не соответствующее образование. Но, как показывает практика, и этого недостаточно. Вам, наверняка, известен тот прискорбный факт, что одна и та же web-страница может по разному выглядеть в браузерах различных производителей и даже в различных версиях браузера одного и того же производителя. Таким образом, для создания полноценной страницы и обеспечения <i>межбраузерной совместимости</i> недостает еще одного звена. Именно этим звеном и является <strong>JavaScript</strong>. 
</p>

<p>JavaScript является языком создания <i>клиентских</i> сценариев (или скриптов). Это означает, что текст сценария передается на компьютер конечного пользователя и там выполняется, внося в страницу дополнительную динамику и расширяя ее возможности. Подробнее о классификации и особенностях функционирования сценариев речь пойдет позже в данном уроке, а сейчас мы рассмотрим вопросы, касающиеся возникновения JavaScript, а так же, аспекты применения данного языка программирования.
</p>

<h3>Рождение JavaScript</h3>
<p>Прообраз JavaScript - <strong>LiveScript</strong> был разработан компанией <strong>Netscape</strong>. Ожидалось, что LiveScript существенно расширит возможности HTML и станет частичной альтернативой CGI-сценариям (<strong>CGI</strong> - Common Gateway Interface - технология, позволяющая выполняемому на сервере программному модулю генерировать web-страницы, используя при этом внешние хранилища информации, например - базы данных или файлы). В дальнейшем компания Netscape начала работать с компанией Sun - создателем <strong>Java</strong> - над созданием нового языка сценариев, по синтаксису и семантике тесно связанным с Java. Отсюда и новое название - JavaScript.
</p>

<p>С момента своего появления (декабрь 1995 г.) язык JavaScript имел существенную поддержку в лице ведущих производителей, в числе которых Apple, Borland, Sybase, Informix, Oracle. Digital, HP и IBM. JavaScript продолжает развиваться, внедряясь не только в современные браузеры, но и в приложения, созданные различными компаниями. 
</p>

<p>Немного позже, понимая всю важность создания Web-сценариев, Microsoft решила поддержать JavaScript. Однако компания Netscape предпочла передать Microsoft лишь только лицензию на право использования технологии. На основе общедоступной документации в Microsoft был создан "перепроектированый" JavaScript - JScript, поддерживаемый Internet Explorer 3.0 и выше. JScript 1.0 плохо совместим с JavaScript 1.1, используемым Netscape Navigator 3.0 и более поздними браузерами. В конечном итоге множество версий и различных хитростей, характерных для того или иного браузера, стали причиной головной боли для разработчиков Web-сайтов, использующих JavaScript. 
</p>
<p>К счастью, огорченные разработчики сценариев смогли вздохнуть свободно. Компании Netscape, Microsoft и другие производители решили подогнать язык под стандарты ЕСМА (European Computer Manufactureres Association). В тот период ЕСМА составила спецификацию языка - ECMAScript, что поддержали все производители. Хотя стандарты ЕСМА оказывают существенную помощь, все же компании Netscape и Microsoft продолжают развивать языки JavaScript и JScript, выходя при этом за пределы стандартов. 
</p>
<p>Помимо JScript, еще одним конкурентом JavaScript является VBScript, созданный с целью упрощения Web-разработок на Visual Basic (VB). VBScript является подмножеством языка Visual Basic. Из-за отсутствия поддержки со стороны Netscape, VBScript используется для интрасетей. Он пользуется большой популярностью у пользователей Microsoft Internet Explorer. 
</p>
<p>Несмотря на появление VBScript, JavaScript стал стандартным языком сценариев для Web (и не только клиентских).</p>


<h3>Возможности JavaScript</h3>
<p>Прежде чем приступить к рассмотрению возможностей JavaScript, хотелось бы поближе познакомить вас, уважаемые читатели, с принципами функционирования клиентских сценариев - это должно дать вам возможность более глубоко понять дальнейший материал.
</p>
<p>Итак, что происходит, когда браузер загружает HTML страницу? В самом простом случае происходит простой процесс - построчное считывание файла, начиная с тэга <code>&lt;<tag>html</tag>&gt;</code> (обычно) в начале и заканчивая <code>&lt;/<tag>html</tag>&gt;</code> в конце. Однако браузер может прервать этот процесс, в зависимости от содержания страницы. К примеру, если в теле страницы будет встречен элемент <code>&lt;<tag>img</tag> <attr> src</attr>=<str>"..."</str> /&gt;</code>, браузер отправит к серверу запрос на получение изображения, адрес которого указан атрибутом <code><attr>src</attr></code>. 
</p>
<p>Приблизительно то же самое происходит и в тех случаях, когда браузер сталкивается с командами клиентского сценария. JavaScript, как и все клиентские сценарии является <strong>интерпретируемым</strong> языком программирования. В отличии от C++, средствами которого можно написать программу, компилируемую в исполняемый файл, команды интерпретируемого языка выполняются другой программой (в нашем случае браузером). Текст сценария записывается непосредственно в HTML странице и отправляется вместе с ней на компьютер пользователя. При разборе страницы, браузер, встречая команды сценария, просто выполняет их. Этот принцип имеет множество достоинств и ряд ограничений, которые рассматриваются ниже.
</p>
<tip start="Примечание">текст программы, написанный на любом компилируемом языке проходит два основных этапа - компиляцию и связывание, в результате чего образуется исполняемый модуль. В интерпретируемых языках эти этапы отсутствуют. Текст программы просто выполняется. Оба подхода имеют ряд достоинств и недостатков. Так, например, скрипты выполняются значительно медленнее скомпилированных и загруженных в память компьютера машинных команд.

</tip>

<p>Итак, какие основные цели преследует любой создатель web-страницы, внедряя в нее сценарии:
</p>
<ul>
	<li>добавление "интеллекта" в страницу (определение типа и версии браузера, получение тек. даты и времени и т.п.);</li>
	<li>отслеживание и обработка событий, возникающих на странице в результате действий пользователя;</li>
	<li>проверка допустимости данных форм перед отправкой их на сервер;</li>
	<li>изменение содержимого или оформления элементов страницы;</li>
	<li>изменение структуры страницы;</li>
	<li>создание сложных анимационных эффектов на странице (сюда можно отнести "хвост" за курсором мыши, выпадающие или раскрывающиеся меню и т.п.);</li>
	<li>работа с дополнительными окнами (открытие, закрытие, изменение их размера, положения и содержимого);</li>
</ul>
<p>Однако, если говорить о возможностях того или иного инструмента, полезно сделать не только обзор того, "что можно сделать", но и обратной стороны медали - "чего нельзя сделать". Этим мы с вами и займемся.
</p>
<p>При помощи JavaScript нельзя:</p>
<ul>
	<li>вызывать функции программного интерфейса приложений операционной системы - <strong>API</strong>;</li>
	<li>управлять распределением оперативной памяти;</li>
	<li>получать доступ к файлам и др. системным ресурсам сервера;</li>
	<li>получать доступ к файлам (кроме файлов предпочтений - <i>cookie</i>, которые рассматриваются в курсе позже) и др. системным ресурсам клиента;</li>
	<li>работать с базой данных;</li>
</ul>

<p>Если трезво взглянуть на вещи, то некоторые ограничения JavaScript можно считать его достоинствами. К примеру, возьмем вопрос получения доступа к файлам и др. системным ресурсам клиента. Чувствовали бы вы себя уютно, понимая, что чуть ли не любая интернет-страница может "покопаться" у вас на жестком диске или в реестре? Не думаю... Так что ограничения описанные выше являются вполне обоснованными.
</p>
<p>Многие из перечисленных выше ограничений можно преодолеть при помощи JavaScript с использованием технологии создания серверных сценариев <strong>ASP</strong> или <strong>ASP.NET</strong>, однако данный вопрос выходит за рамки нашего курса и нами рассмотрен не будет. Мы сосредоточим все свое внимание на создании и использовании клиентских сценариев, а это, поверьте, достаточно объемный и иногда даже сложный материал, несмотря на простоту и доступность JavaScript.</p>

</lesson>