<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №1: Введение в JavaScript" next="section4.xml" prev="section2.xml" summ="0">
<h2>Переменные</h2>
<p>Часто, при выполнении сценарием некоторых вычислений, требуется сохранить результат, полученный на определенном этапе, с целью его дальнейшего использования. Программисты для этих целей используют <strong>переменные</strong>. По большому счету, переменная - это ячейка оперативной памяти компьютера, которая имеет имя и может хранить данные. Однако, с точки зрения JavaScript, переменную проще представлять, как <strong>объект</strong>, с которым ассоциированы какие-то данные. Объекты позволяют не только хранить данные, но и манипулировать ими. Вас, как программистов на JavaScript абсолютно не должен заботить процесс выделения или освобождения оперативной памяти компьютера, когда мы создаем переменные и работаем с ними. По сути дела, перед вами стоят следующие задачи:
</p>
<ul>
	<li>создание (объявление) переменной;</li>
	<li>инициализация переменной (присвоение переменной значения);</li>
	<li>использование переменной в операторах сценария.</li>
</ul>

<p>Как вы увидите далее, без переменных не обходится практически ни один скрипт. Так что, тема важна и достойна внимания.
</p>
<h3>Объявление переменных</h3>
<p>Переменные в JavaScript объявляются при помощи ключевого слова <code><keyword>var</keyword></code>, которое располагается в начале объявления. При объявлении переменной можно присвоить значение (проинициализировать). За один раз можно объявить более одной переменной, в таком случае они разделяются запятой "<code>,</code>". Объявление заканчивается символом "<code>;</code>".</p>

<p>Шаблон объявления переменных имеет следующий вид (в квадратные скобки [] взяты необязательные части конструкции):</p>
<example>
<keyword>var</keyword> имя_переменной [= значение] [, имя_переменной [= значение] ... ]; 
</example>
<p>Ниже приводятся несколько примеров объявления переменных:</p>
<example>
<keyword>var</keyword> angle; <comment>//переменная объявлена но не проинициализирована
</comment> 
<keyword>var</keyword> counter_1 = <num>0</num>; <comment>//переменная объявлена и проинициализирована значением 0
</comment>
<keyword>var</keyword> FirstName, LastName = <str>"Иванов"</str>, age=<num>20</num>; <comment>//объявление нескольких переменных одновременно
</comment>

</example>
<p>Как видите, объявить переменную не сложно, но при этом необходимо помнить следующие правила:
</p>
<ul>
	<li>имена переменных чувствительны к регистру;</li>
	<li>имена переменных должны состоять из букв латинского алфавита, цифр и знаков "_";</li>
	<li>имена переменных не могут начинаться с цифры;</li>
	<li>переменная должна быть объявлена до того, как вы начнете ее использовать;</li>
</ul>
<tip start="Совет">давайте переменным сценариев осмысленные и информативные имена - так вам будет легче понять, какая переменная за что отвечает. Если не знаете английского названия той или иной сущности можно воспользоваться <i>транслитерацией</i> и назвать переменную так: "Kurs_Valuti" - такое название несет куда больше информации, чем "KV", например.
</tip>
<tip start="Совет">
объявляйте все переменные в самом начале сценария или функции - в таком случае переменные будут сгруппированы в одном месте сценария. К тому же, это даст вам уверенность в том, что переменные используются после объявления.
</tip>

<p>Если переменная не была проинициализирована при объявлении, она будет содержать специальное значение - <code><resword>undefined</resword></code> (неопределено). 
</p>

<p>В некоторых случаях переменную инициализировать все же необходимо, но ей не нужно присваивать конкретное значение. В такой ситуации можно воспользоваться еще одним специальным значением <code><keyword>null</keyword></code> (пусто).</p>

<h3>Типы данных</h3>
<p>При инициализации переменная не только получает новое значение, она приобретает еще одну важную характеристику - <strong>тип</strong>. Тип переменной указывает, какого рода данные содержатся в переменной. Это очень важное понятие, так как оно определяет не только то, как две переменные могут объединяться между собой (например, математически или логически), но и то, могут ли они объединяться вообще.
</p>
<p>В JavaScript используются следующие типы данных:
</p>
<ul>
	<li>строковый;</li>
	<li>числовой;</li>
	<li>логический;</li>
	<li>объектный.</li>
</ul>

<p>По правде говоря, переменные JavaScript не имеют строго определенного типа. Как уже говорилось выше, тип переменной определяется присвоенным ей значением и может измениться на протяжении программы. Во многих случаях, при выполнении операций над разнотипными данными происходит автоматическое преобразование типа. Иногда это достаточно удобно - не требуется выполнять дополнительных действий по преобразованию типов, но в некоторых случаях это может привести к непредвиденным последствиям. Поэтому за типами переменных необходим строгий контроль.
</p>
<p>В JavaScript, как и во многих других языках программирования, существует понятие <strong>литеральный тип данных</strong> - это специальный тип, касающийся фиксированных значений. JavaScript поддерживает три литеральных типа данных:
</p>
<ul>
	<li>строковый;</li>
	<li>числовой;</li>
	<li>логический;</li>
</ul>

<h3>Числовые литералы</h3>
<p><strong>Целые числовые литералы</strong> представляют собой числа, не содержащие дробной части. Записываются такие литералы в виде простой последовательности цифр:</p>
<example>
<num>0
</num>
<num>-1
</num>
<num>135</num>
</example>
<p><strong>Числовые литералы с плавающей точкой</strong> представляют собой числа c дробной частью. Таким образом, сначала нужно указать целую часть, затем десятичную точку (используется символ "."), затем дробную часть:</p>
<example>
<num>0.5
</num>
<num>-1.5667
</num>
<num>5.234e+3
</num>
<num>5.234E-8</num>
</example>

<p>Последние два значения в примере представлены в так называемой <strong>экспоненциальной форме</strong>. Такая запись числа используется для записи действительно больших или маленьких чисел с плавающей точкой. За дробной частью числа идет символ "e" или "E", после чего следует степень числа 10. Давайте разберем предпоследнее число предыдущего примера. Его можно представить в следующей форме: <code><num>5.234</num>*<num>10<sup>3</sup></num></code> то есть <code><num>5.234</num>*<num>1000</num></code> или <code><num>5234</num></code>. Последнее число в примере будет выглядеть так: <code><num>5.234</num>/<num>10<sup>8</sup></num></code>.</p>

<p><strong>Восьмеричные и шестнадцатеричные значения</strong>. Чаще всего в практике программирования вы будете использовать десятичные значения, однако бывают случаи, когда вам придется столкнуться с восьмеричной (основание 8) и шестнадцатеричной (основание 16) системами счисления. 
</p>

<p>В восьмеричной системе счисления используются цифры от 0 до 7. Число, равное 8 в десятичной системе, в восьмеричной системе будет равно 10. Для записи восьмеричного числа в JavaScript перед числом записывается "0":</p>
<example>
<num>0345
</num>
<num>031</num>
</example>

<p>В шестнадцатеричной системе счисления используются цифры от 0 до 9, а ,так же, буквы от "a" до "f" (или от "A" до "F") латинского алфавита. Число, равное 8 в десятичной системе, в восьмеричной системе будет равно 10. Для записи шестнадцатеричного числа в JavaScript перед числом записывается "0x" (или "0X"):</p>
<example>
<num>0xD45
</num>
<num>0X1FF</num>
</example>

<h3>Строковые литералы</h3>
<p>Строковый литерал представляет собой последовательность символов (абсолютно любых), заключенных в двойные (") или одинарные (') кавычки. Ниже приводятся несколько примеров строковых литералов:
</p>
<example>
<str>"Строковый литерал"
</str>
<str>'другой строковый литерал'
</str>
<str>"1 января 2004 г."
</str>
<str>""
</str>
</example>
<p>В последнем случае строка не содержит ни одного символа и называется <strong>пустой</strong>.</p>

<p>При работе со строками, вы непременно столкнетесь с необходимостью использования кавычек внутри строки. Вы можете свободно использовать одинарные кавычки (') в строках, заключенных в двойные кавычки (") и наоборот:</p>
<example>
<str>"АО 'Таврия'"
</str>
<str>'В слове "длинношеее" в конце подряд 3 "е"'
</str>
</example>

<p>Использование кавычек, ограничивающих строку, внутри строки не допускается. Но что же делать, если такая необходимость все же возникает. Например, рассмотрим следующие строки:
</p>
<example>
<str>"Строка ограничена символами ("</str>) или (<str>')"
</str>
<str>'Строка ограничена символами (") или ('</str>)'
</example>

<p>Как бы вы ни комбинировали кавычки - строка все равно будет некорректной с точки зрения JavaScript. Как же поступать в такой ситуации?
</p>
<p>В таких случаях необходимо использовать <strong>управляющие последовательности</strong>. Из курса C++ вам должно быть известно, что, если в строке присутствует последовательность символов <code><str>"\n"</str></code>, то, при выводе такой строки на экран, происходит переход на следующую строку. Комбинация символов <code><str>"\n"</str></code> и является управляющей последовательностью, выполняющей определенную функцию - переход на следующую строку. Ниже приводится таблица, содержащая наиболее популярные управляющие последовательности:
</p>

<table align="center" border="1" cellspacing="0" frame="box" rules="groups" style="margin-bottom: 10;">
	<tr>
		<th>Последовательность</th>
		<th>Символ</th>
	</tr>
	<caption align="center" valign="bottom">Табл. 1.1. Управляющие последовательности.</caption>
	
	<colgroup style="width: 180; padding-left: 15;" />
	<colgroup style="width: 350; padding-left: 10;" />
	
	<tr>
		<td>\'</td><td>Символ ' (одинарная кавычка)</td>
	</tr>
	<tr>
		<td>\"</td><td>Символ " (двойная кавычка)</td>
	</tr>
	<tr>
		<td>\\</td><td>Символ \ (обратный "слэш")</td>
	</tr>
	<tr>
		<td>\b</td><td>Символ "BackSpace"</td>
	</tr>
	<tr>
		<td>\n</td><td>Перевод строки (новая строка)</td>
	</tr>
	<tr>
		<td>\r</td><td>Возврат каретки</td>
	</tr>
	<tr>
		<td>\t</td><td>Символ "Tab"</td>
	</tr>
	
</table>

<p>Таким образом, "конфликтная" строка предыдущего примера может быть переписана так:
</p>
<example>
<str>"Строка ограничена символами (\") или (')"
</str>
</example>

<p>Пример применения управляющих последовательностей в строках:
</p>
<example number="1.3" title="применение управляющих последовательностей" href="samples/sample2.html">
&lt;<tag>html</tag>&gt;
    &lt;<tag>body</tag>&gt;
        &lt;<tag>script</tag> <attr> type</attr>=<str>"text/javascript"</str>&gt; 
            <comment>//объявление переменной строкового типа с именем "message"</comment>&#160;
            <keyword>var</keyword> message=<str>"Первая строка\nВторая строка"</str>;
            <stdfunc>alert</stdfunc>(message);<comment>// вывод диалогового окна с текстом</comment>&#160;
        &lt;/<tag>script</tag>&gt;
    &lt;/<tag>body</tag>&gt;
&lt;/<tag>html</tag>&gt;
</example>


<h3>Логические (булевы) литералы</h3>
<p>Это самый простой тип литералов, принимающий всего два значения: <code><keyword>true</keyword></code> или <code><keyword>false</keyword></code>. Несмотря на кажущуюся бесполезность, логические литералы широко применяются в логических выражениях, используемых в конструкциях управления ходом выполнения программы - условиях и циклах (см. далее в уроке).
</p>

<p>Ниже приводится пример использования логических литералов:</p>
<example>
<keyword>var</keyword> ContinueSort = <keyword>false</keyword>;
</example>

</lesson>
