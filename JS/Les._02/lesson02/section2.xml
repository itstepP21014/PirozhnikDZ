<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №1: Введение в JavaScript" next="section3.xml" prev="section1.xml" summ="0">
<h2>Объектный тип данных</h2>
<h3>Введение в объектно-ориентированное программирование</h3>
<p>Как уже было сказано ранее, переменные в JavaScript представляют собой не просто некую ячейку памяти, имеющую имя, а <i>объекты</i>. Объекты - это особая структурная единица программы, которая описывает некоторую целостную сущность. У объектов есть <i>свойства</i>, <i>методы</i> и <i>события</i>.
</p>

<p>Описание объекта в программировании схоже с описанием объектов реального мира. Рассмотрим пример: необходимо описать объект <i>автомобиль</i>. Начнем со свойств, присущих автомобилю: марка, модель и т.п. Теперь методы: ускорение, торможение, повороты и др. С событиями дело обстоит не намного сложнее. Что происходит, когда водитель поворачивает ключ зажигания? Правильно - автомобиль заводится (в нормальной ситуации, конечно). Итак, событием в данном случае является поворот ключа, а старт двигателя - реакция автомобиля на событие.</p>

<p>Объекты в программировании могут входить в состав других объектов, образуя сложные иерархические структуры. Возвращаясь к аналогии с автомобилем, в качестве дочернего объекта авто могут выступать корпус, двигатель, коробка передач, автомагнитола и т.д. Двигатель, в свою очередь, состоит из карбюратора, стартера, аккумулятора и др. Эту иерархию можно углублять вплоть до винтиков и неделимых блоков автомобиля - все зависит только от требуемого уровня абстракции.
</p> 
<p>Каждый из дочерних объектов, так же обладает своими свойствами. Например, корпус можно охарактеризовать типом кузова (седан, универсал, ...), а двигатель - объемом, количеством цилиндров и др. свойствами.
</p>

<p>В соответствии с приведенными выше соображениями составим схематическое представление иерархии объектов для описания автомобиля (<i>во избежание излишнего усложнения схемы, методы и события опущены</i>):
</p>

<picture number="2.1" title="Упрощенная иерархия объектов автомобиля" src="images/ierarchy.gif" />

<p>Таким образом, объекты позволяют более наглядно описывать сложные составные сущности, характеризуемые множеством признаков. 
Без использования объектов нам пришлось бы для каждой характеристики автомобиля завести отдельную переменную, а это, согласитесь, было бы не очень удобно.
</p>

<h3>Создание объектов</h3>
<p>Для создания объектов используются специально написанные для этой цели функции - <i>конструкторы</i>. Конструкторы могут принимать параметры, используемые для инициализации свойств объекта при создании. Рассмотрим создание объекта в JavaScript на уже приводимом выше примере - описание авто:
</p>
<example>
<comment>// конструктор объекта "Автомобиль"</comment>&#160;
<kw>function</kw> Automobile (aVendorName, aModel) {
    <kw>this</kw>.vendor = aVendorName;
    <kw>this</kw>.model = aModel;
    <kw>return</kw>&#160;<kw>this</kw>;
}
</example>

<p>В данном примере используется новое для вас ключевое слово - <code><kw>this</kw></code>. <code><kw>this</kw></code> представляет собой <i>внутренний указатель объекта</i>. Таким образом, запись <code><kw>this</kw>.vendor = aVendorName;</code> создает свойство с именем "vendor" в текущем объекте и присваивает ему значение переменной "aVendorName". После создания и инициализации всех свойств объекта, функция должна выполнить команду <code><kw>return</kw>&#160;<kw>this</kw></code> - т.е. вернуть указатель на объект в программу.
</p>

<p>Для создания переменных объектных типов данных в JavaScript используется специальный оператор <code><kw>new</kw></code>, который записывается перед конструктором объекта. Таким образом, создание переменной объектного типа "Автомобиль" можно записать следующим образом:
</p>
<example>
<comment>// создание переменной объектного типа данных "Автомобиль"</comment>&#160;
<kw>var</kw> myAuto = <kw>new</kw> Automobile("Toyota", "Celica");
</example>

<p>Примерно так же, как и свойства, создаются методы объектов. Для создания метода сначала необходимо описать функцию, выполняющую действия над свойствами объекта, обращаясь к ним при помощи внутреннего указателя <code><kw>this</kw></code>, после чего, присвоить имя этой функции свойству объекта. Ниже приведен сокращенный листинг, демонстрирующий создание метода "toString()" для объекта "Automobile":
</p>

<example>
<comment>// конструктор объекта "Автомобиль"</comment>&#160;
<kw>function</kw> Automobile (aVendorName, aModel) {
    ...
   <highlight><kw>this</kw>.toString = autoToStr;</highlight>&#160;
    <kw>return</kw>&#160;<kw>this</kw>;
}
<comment>// функция, выполняющая роль метода объекта "Автомобиль"</comment>&#160;
<highlight><kw>function</kw> autoToStr()</highlight> {
    <kw>return</kw>&#160;<kw>this</kw>.vendor+" "+<kw>this</kw>.model; 
}
</example>

<h3>Использование свойств и методов объектов</h3>
<p>Итак, объект создан, наделен необходимыми свойствами и методами и готов к использованию.
Осталось только выяснить, как обращаться к свойствам объекта и вызывать его методы?
Для обращения к свойству или вызова метода объекта необходимо записать имя объектной переменной и 
имя свойства или метода, разделив их символом ".", как демонстрирует приведенная ниже конструкция:
</p>
<example>
<i>объектная_переменная</i>.свойство = ...; <comment>// обращение к свойству</comment>&#160;
<i>объектная_переменная</i>.метод(...); <comment>// вызов метода</comment>&#160;
</example>

<p>Теперь рассмотрим все вышесказанное на примере:
</p>
<example number="2.4" title="итоговый пример на использование объектов" href="samples/auto.html">
<comment>// конструктор объекта "Двигатель"</comment>&#160;
<kw>function</kw> Engine (cil, v) {
    <kw>this</kw>.cilCount = cil;
    <kw>this</kw>.v = v;
    <kw>return</kw>&#160;<kw>this</kw>;
}
<comment>// конструктор объекта "Автомобиль"</comment>&#160;
<kw>function</kw> Automobile (aVendorName, aModel, nCil, V) {
    <kw>this</kw>.vendor = aVendorName;
    <kw>this</kw>.model = aModel;
    <kw>this</kw>.engine = <kw>new</kw> Engine (nCil, V);
    <kw>this</kw>.getInfo = autoInfo;

    <kw>return</kw>&#160;<kw>this</kw>;
}
<kw>function</kw> autoInfo() {
    <stdfunc>alert</stdfunc> (<str>"Производитель: "</str>+<kw>this</kw>.vendor+<str>"\n"</str>+
           <str>"Модель: "</str>+<kw>this</kw>.model+<str>"\n"</str>+
           <str>"Двигатель: "</str>+<kw>this</kw>.engine.cilCount+<str>"цил. объем "</str>+<kw>this</kw>.engine.v+<str>"л.\n"</str>); 
}

<kw>var</kw> myAuto = <kw>new</kw> Automobile(<str>"Toyota"</str>, <str>"Celica"</str>, <num>6</num>, <num>2.2</num>);
myAuto.getInfo();
</example>

<p>Пускай пример на первый взгляд кажется громоздким, но факт остается фактом - 
работать с одной объектной переменной значительно удобнее, чем с множеством простых. Тем более, 
что объявление объектов и их методов можно вынести во внешний файл и подключать к тем страницам, 
где они понадобятся.
</p>
</lesson>