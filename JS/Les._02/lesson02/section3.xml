<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Урок №1: Введение в JavaScript" next="section4.xml" prev="section2.xml" summ="0">
<h2>Основы DOM</h2>
<p>Как упоминалось ранее, одним из основных достоинств JavaScript является возможность взаимодействия с браузером. Это взаимодействие осуществляется путем получения и установки значений свойств <i>объектов браузера</i>, а, так же, вызова их методов. Иерархию объектов документа, доступных из JavaSctipt, принято называть <i>Объектной Моделью Документа - Document Object Model (DOM)</i>. Каждый объект этой иерархии служит определенным целям. Например: объект <code>window</code> позволяет манипулировать окнами браузера, а объект <code>document</code> позволяет обращаться к элементам, расположенным на странице и изменять их содержимое и стиль. Именно с этим объектом браузера мы познакомимся в данном разделе урока.
</p>

<h3>Доступ к элементу страницы по идентификатору</h3>
<p>Для доступа к элементам страницы чаще всего используют идентификаторы элементов - атрибут "id". Предположим, на странице есть некий абзац с идентификатором "abzac1":
</p>
<example>
&lt;<tag>p</tag> <attr> id</attr>=<str>"abzac1"</str>&gt;...&lt;/<tag>p</tag>&gt;
</example>

<p>Тогда доступ к этому элементу из JavaSctipt выполняется так, как будто "abzac1" - это переменная объектного типа данных, объявленная в тексте сценария:</p>
<example>
&lt;<tag>p</tag> <attr> id</attr>=<str>"abzac1"</str>&gt;Текст абзаца&lt;/<tag>p</tag>&gt;
&lt;<tag>script</tag> <attr> type</attr>=<str>"text/javascript"</str>&gt;
    abzatc1.style.color=<str>"red"</str>; <comment>// поменять цвет текста на красный</comment>
&lt;/<tag>script</tag>&gt;
</example>

<p>Этот способ хорош своей простотой, но становится бесполезным в тех случаях, когда идентификатор элемента не известен заранее, а вычисляется, например, как значение некоторого выражения. В этом случае используют метод объекта <code>document</code>&#160;<code>getElementById(id)</code>. </p>

<p>Представьте себе ситуацию: на странице располагаются несколько абзацев с идентификаторами "p1", "p2", ... "p10". Сценарию необходимо перебрать все элементы и поменять цвет текста в них на заданный. Эта задача решается следующим образом:
</p>
<example>
&lt;<tag>p</tag> <attr> id</attr>=<str>"p1"</str>&gt;Абзац 1&lt;/<tag>p</tag>&gt;
&lt;<tag>p</tag> <attr> id</attr>=<str>"p2"</str>&gt;Абзац 2&lt;/<tag>p</tag>&gt;
...
&lt;<tag>p</tag> <attr> id</attr>=<str>"p10"</str>&gt;Абзац 10&lt;/<tag>p</tag>&gt;
&lt;<tag>script</tag> <attr> type</attr>=<str>"text/javascript"</str>&gt;
    <kw>for</kw> (<kw>var</kw> i=<num>1</num>; i&lt;=<num>10</num>; i++)
        <highlight>document.getElementById(<str>"p"</str>+i)</highlight>.style.color=<str>"red"</str>; <comment>// поменять цвет текста на красный</comment>
&lt;/<tag>script</tag>&gt;
</example>

<p>Этот способ более сложен, но и более универсален.
</p>

<p>Получив доступ к элементу мы можем выполнять над ним различные операции. В частности:
</p>
<ul>
	<li>изменение содержимого элемента</li>
	<li>изменение стиля элемента</li>
</ul>

<h3>Изменение содержимого элемента</h3>
<p>Для изменения содержимого элемента можно использовать 2 свойства элементов:
</p>
<ul>
	<li><b>innerText</b> - текстовое содержимое элемента;</li>
	<li><b>innerHTML</b> - содержимое элемента с HTML разметкой.</li>
</ul>

<p>Свойство <code>innerText</code> используется как для чтения, так и для записи текстового содержимого элемента. Если свойству <code>innerText</code> присвоить в качестве значения строку "Это &lt;b&gt;полужирный&lt;/b&gt; текст", то строка появится на странице без изменений. Это говорит о том, что свойство <code>innerText</code> не интерпретируется браузером при выводе на страницу.
</p>
<p>Для того, чтобы разметка HTML интерпретировалась браузером, необходимо воспользоваться свойством <code>innerHTML</code>. Например, нам необходимо вывести на страницу строку "Да здравствует Мировая Революция", где слова "Мировая Революция" должны иметь полужирное начертание. Ниже приводится пример реализации поставленной задачи с использованием обоих свойств (<code>innerText</code> и <code>innerHTML</code>):
</p>
<example number="2.5" title="Изменение содержимого элементов" href="samples/content_change.html">
&lt;<tag>p</tag> <attr> id</attr>=<str>"lozung1"</str>&gt;&lt;/<tag>p</tag>&gt;
&lt;<tag>p</tag> <attr> id</attr>=<str>"lozung2"</str>&gt;&lt;/<tag>p</tag>&gt;
&lt;<tag>script</tag> <attr> type</attr>=<str>"text/javascript"</str>&gt;
    lozung1.innerText=<str>"Да здравствует &lt;b&gt;Мировая Революция&lt;/b&gt;!"</str>; <comment>// используется innerText</comment>
    alert("Используется свойство 'innerText'");
    lozung2.innerHTML=<str>"Да здравствует &lt;b&gt;Мировая Революция&lt;/b&gt;!"</str>; <comment>// используется innerText</comment>
    alert("Используется свойство 'innerHTML'");
&lt;/<tag>script</tag>&gt;
</example>

<h3>Изменение стиля элемента</h3>
<p>Для изменения стиля элемента используется свойство <code>style</code>. Это свойство, в свою очередь, является объектом, содержащим множество свойств, соответствующих атрибутам стиля элемента в CSS. Правда синтаксис записи свойств стиля в JavaScript и в CSS несколько отличается. Ниже приведены правила, следуя которым вы сможете преобразовать названия свойств стилей из CSS в JavaScript:
</p>
<ul>
	<li>все простые свойства стилей CSS (такие как "color", "border", "padding" и т.п.) записываются без изменений в нижнем регистре;</li>
	<li>составные названия свойств стилей CSS (такие как "font-size", "background-color") записываются без символов "-", а слово, следующее за ним приписывается с заглавной буквы: <code>fontSize</code>, <code>backgroundColor</code>, <code>listStyleType</code> и т.д.</li>
</ul>

<p>Таким образом, для того, чтобы, например, установить толщину верхней границы некоторого элемента с идентификатором "someElement" равной 0.5 сантиметра, необходимо использовать следующий код:
</p>
<example>
someElement.style.borderTopWidth = <str>"0.5cm"</str>;
</example>

<h3>Использование метода <code>document.write()</code></h3>
<p>Метод <code>write()</code> объекта <code>document</code> позволяет вывести на страницу строку текста с HTML разметкой. Вызов этого метода необходимо размещать в блоке сценария, располагающегося в теле страницы. Если метод <code>document.write()</code> используется некоторой функцией, то вызов этой функции так же необходимо размещать в теле документа, тогда как объявление функции может располагаться в заголовке страницы или даже во внешнем файле сценария.
</p>
<p>Продемонстрируем использование метода <code>document.write()</code> на примере:
</p>
<example number="2.6" title="Использование метода 'document.write()'" href="samples/docwrite.html">
&lt;<tag>body</tag>&gt;
    &lt;<tag>script</tag>&#160;<attr>type</attr>=<str>"text/javascript"</str>&gt;
        <kw>for</kw>(<kw>var</kw> i=1; i&lt;=7; i++) {
            document.write (<str>"&lt;font size='"</str>+i+<str>"'&gt;Text&lt;/font&gt;&lt;br /&gt;"</str>);
        }
    &lt;/<tag>script</tag>&gt;
&lt;/<tag>body</tag>&gt;
</example>

<p>Стоит отметить, что этот способ вывода данных на страницу менее предпочтителен, по сравнению с изменением содержимого имеющихся элементов и потому используется на практике в довольно редких случаях.
</p>
</lesson>