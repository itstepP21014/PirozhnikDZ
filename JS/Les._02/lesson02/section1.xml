<?xml version="1.0" encoding="windows-1251" ?>
<?xml:stylesheet type="text/xsl" href="common/layout.xsl" ?>

<lesson title="Функции и объекты JavaScript" next="section2.xml" prev="index.xml" summ="0">

<h2>Функции</h2>
<p>Как вы уже могли убедиться, в JavaScript реализовано множество инструкций, предназначенных для решения определенных задач. Например, метод <code><stdfunc>alert</stdfunc>()</code> позволяет вывести окно с текстовым сообщением, а метод <code><stdfunc>parseInt</stdfunc>()</code> - преобразовать строку в целое число. Однако, как бы ни был совершенен набор средств языка программирования, все возможные задачи не предусмотреть. Если вам необходимо будет решать задачу, для которой не существует готового решения, вы придете к необходимости создания собственной <i>функции</i>.
</p>
<p><i>Функцией</i> в программировании называют особым образом оформленную совокупность операторов, предназначенную для решения определенной задачи. Функции существуют отдельно от остальной части скрипта. Как вы знаете из предыдущего урока, операторы JavaScript, размещенные в элементе <code>&lt;<tag>script</tag>&gt;&lt;/<tag>script</tag>&gt;</code>, выполняются браузером "автоматически" при разборе страницы, в то время, как операторы, размещенные в функции, не выполняются до тех пор, пока функция не будет <i>вызвана</i>.
</p>
<p>Использование функций в программе позволяет обособить часть кода, необходимость вставки которого возникает в программе многократно, и заменить его на вызов функции. Такой подход позволяет избавить скрипт от избыточного повторения операторов и делает код гораздо более понятным и наглядным.
</p>

<h3>Объявление и вызов функции</h3>
<p>Функция объявляется при помощи ключевого слова <code><kw>function</kw></code>. Формат объявления функции имеет следующий вид:</p>
<example>
<kw>function</kw><i> имя_функции</i> ([<i>аргументы</i>]) {
    <comment>// тело функции</comment>
}
</example>

<p>Рассмотрим элементы данной конструкции:</p>
<ul>
	<li><code><kw>function</kw></code> - ключевое слово, при помощи которого объявляются функции;</li>
	<li><i>имя_функции</i> - уникальное в пределах сценария имя, идентифицирующее функцию. Для имен функций справедливы все те правила и требования, что и для имен переменных в JavaScript.</li>
	<li><i>аргументы</i> - аргументы служат для передачи функциям входных данных. При указании нескольких аргументов, они разделяются запятыми. Круглые скобки за именем функции обязательны, даже если функция не должна иметь аргументов.</li>
	<li>тело функции - последовательность операторов JavaScript, выполняющих определенную задачу.</li>
</ul>

<tip start="Совет">чаще всего не имеет значения, в каком месте страницы расположен элемент <code>&lt;<tag>script</tag>&gt;&lt;/<tag>script</tag>&gt;</code>, содержащий объявления функций. Однако, хорошим тоном программирования считается объявление функций в заголовке страницы или во внешнем файле скрипта.
</tip>

<p>Как уже было сказано ранее, операторы тела функции не выполняются браузером, если функцию не вызвать. Вызов функции осуществляется путем записи в сценарии имени функции с круглыми скобками, в которых, при необходимости, записываются параметры - значения, необходимые для работы функции:
</p>
<example>
<i>имя_функции</i> ([<i>параметры</i>]);
</example>

<p>В качестве параметров функций могут выступать переменные, литералы, а, так же, вызовы других функций. Если функции передается более одного параметра, они разделяются запятыми.</p>
<tip start="Примечание">для того, чтобы функция могла выступать в качестве параметра другой функции, она должна <i>возвращать значение</i>. Эта особенность функций рассматривается ниже в данном разделе.
</tip>

<p>Для того, чтобы лучше понять механизмы объявления и вызова функций, рассмотрим следующий пример:
</p>
<example number="2.1" title="использование функций" href="samples/using_func.html">
&lt;<tag>html</tag>&gt;&#160;
    &lt;<tag>head</tag>&gt;&#160;
        &lt;<tag>script</tag>&#160;<attr>type</attr>=<str>"text/javascript"</str>&gt;&#160;
        <comment>&lt;!--</comment>&#160;
            <kw>function</kw> simpleFunction () { <comment>// объявление функции</comment>&#160;
                <stdfunc>alert</stdfunc>(<str>"Работает функция..."</str>);            
            }
        <comment>//--&gt;</comment>
        &lt;/<tag>script</tag>&gt;
    &lt;/<tag>head</tag>&gt;
    &lt;<tag>body</tag>&gt;&#160;
        &lt;<tag>script</tag>&#160;<attr>type</attr>=<str>"text/javascript"</str>&gt;&#160;
        <comment>&lt;!--</comment>&#160;
            simpleFunction (); <comment>// вызов функции</comment>&#160;
        <comment>//--&gt;</comment>
        &lt;/<tag>script</tag>&gt;
    &lt;/<tag>body</tag>&gt;
&lt;/<tag>html</tag>&gt;
</example>

<p>В листинге 2.1 объявляется функция и именем "simpleFunction", которая не имеет аргументов. Ее функционирование заключается в отображении сообщения  "Работает функция..." методом <code><stdfunc>alert</stdfunc></code>. Вызов функции осуществляется в блоке скрипта, расположенном в теле страницы. Обратите внимание, что круглые скобки после вызова функции обязательны, даже если она не принимает параметров.
</p>

<h3>Передача параметров</h3>
<p>Использование функций позволяет избежать повторения однотипных действий в скрипте. Рассмотрим следующий пример:
</p>
<example>
<kw>function</kw> sayHello() {
    <stdfunc>alert</stdfunc> (<str>"Hello!"</str>);
}
<kw>function</kw> sayGoodbye() {
    <stdfunc>alert</stdfunc> (<str>"Goodbye!"</str>);
}

<comment>// вызов функций </comment>
sayHello();
sayGoodbye();
</example>

<p>Обе функции в примере выполняют одно и то же действие - выводят сообщение с текстом. Однако, текст обоих сообщений разный. Для того, чтобы избежать повторения однотипных действий, приведенный выше фрагмент сценария можно переписать следующим образом:</p>
<example>
<kw>function</kw> say(text) {
    <stdfunc>alert</stdfunc> (text);
}

<comment>// вызов функций </comment>
say(<str>"Hello!"</str>);
say(<str>"Goodbye!"</str>);
</example>

<p>Данный фрагмент сценария выполняет те же действия, что и предыдущий, однако, код сценария получается почти в два раза короче. Вместо двух функций <code>sayHello()</code> и <code>sayGoodbye()</code> используется одна функция <code>say(text)</code> с аргументом <code>text</code> с которым она обращается как с переменной. При вызове функции эта переменная получает значение, используемое операторами тела функции для вычислений.
</p>

<h3>Возвращение значения</h3>
<p>Функции могут не только выполнять последовательность действий, а еще и возвращать некоторое значение, полученное в результате вычислений. Это дает возможность использовать вызовы функций в выражениях, так, как будто это обычные литеральные значения. Для того, чтобы функция возвращала значение, в ее теле должно присутствовать ключевое слово <code><kw>return</kw></code>, за которым следует возвращаемое значение.
</p>
<p> В примере ниже реализована функция, вычисляющая третью степень числа и возвращающая полученное значение:
</p>
<example number="2.2" title="функция. возвращающая значение" href="samples/cube.html">
<kw>function</kw> cube(n) {
    <kw>var</kw> c=n*n*n; <comment>//вычисление куба числа</comment>&#160;
    <highlight><kw>return</kw> c;</highlight>&#160;&#160;&#160;&#160;<comment>//возврат значения</comment>&#160;
}

<kw>var</kw> someNumber = 10;
<stdfunc>alert</stdfunc>(<highlight><num>2</num>*cube(someNumber)</highlight>);
</example>

<p>Обратите внимание на выделенные строки - отмечен возврат функцией "cube()" значения, а, так же, использование вызова функции в выражении.
</p>
<tip start="Примечание">Оператор <code><kw>return</kw></code> применяется не только тогда, когда необходимо вернуть значение, но и в тех случаях, когда выполнение функции необходимо просто прервать не выполняя дальнейших действий. Для этого оператор <code><kw>return</kw></code> записывают без указания возвращаемого значения. Необходимость в таком поступке может возникнуть, например, в результате передачи функции некорректных параметров.
</tip> 

<h3>Области видимости переменных</h3>
<p>Область видимости переменой определяет место в тексте скрипта, где переменная может быть "видима", т.е. определена и доступна для использования. Различают две области видимости:
</p>
<ul>
	<li>глобальную - область видимости уровня страницы,</li>
	<li>локальную - область видимости уровня функции.</li>
</ul>

<p>Переменные объявленные непосредственно в тексте сценария имеют глобальную область видимости, что делает их доступными в любом месте во всех блоках сценариев на странице. Если же переменная объявлена в теле одной из функций, то она получает локальную область видимости и может быть использована только операторами тела данной функции. Грубо говоря, интерпретатор "убивает" локальные переменные как только функция завершит свою работу. Это позволяет сэкономить массу системных ресурсов.
</p>
<p>Вернемся немного назад к листингу 2.2. В теле функции <code>cube()</code> объявляется переменная "с" которая имеет локальную область видимости. Так же в примере встречается и объявление глобальной переменной "someNumber" - эта переменная будет доступна на всей странице ниже своего объявления.
</p>

<h3>Рекурсия</h3>
<p><i>Рекурсией</i> называют прием программирования, когда некоторая функция содержит в своем теле вызов самой себя. Этот прием очень похож на организацию цикла и часто может быть им заменен. Однако существую задачи, где использование рекурсии если не единственное, то более "элегантное" решение. Не стоит, однако, думать, что рекурсия является "панацеей", которая поможет вам при решении любой задачи - это будет ошибочно. Перед применением рекурсии необходимо провести некоторые предварительные расчеты. Рассмотрим их на примере.
</p>

<p>Исторически сложилась традиция, начинать программирование с написания приложения "Hello World!", а демонстрировать рекурсию на примере вычисления факториала числа. Для тех, кому термин "факториал" незнаком: <i>факториалом</i> числа n называется произведение всех чисел от 1 до n. Факториал в математике принято обозначать символом "!":
</p>
<example>
n! = <num>1</num>*<num>2</num>*<num>3</num>*...*n;
</example>
<tip start="Внимание"> Данный пример не является кодом JavaScript - это математическая форма записи факториала числа.
</tip>

<p>В математике действуют следующие привила для факториала:
</p>
<ul>
	<li>0! = 1</li>
	<li>n! = n*(n-1)!</li>
</ul>

<p>Первое правило называют граничным условием а второе - <i>рекурсивным</i> или <i>рекуррентным</i> выражением. С учетом вышесказанного напишем функцию:
</p>
<example number="2.3" title="Рекурсивная функция вычисления факториала" href="samples/fact.html">
<kw>function</kw> factorial(n) {
	<kw>if</kw> (n == 0) <kw>return</kw> 1; <comment>// реализация граничного условия</comment>&#160;
	<kw>else</kw>&#160;<kw>return</kw> n*factorial(n-1); <comment>// реализация рекурсивного выражения</comment>&#160;
}

alert(<str>"5! = "</str>+factorial(5));
</example>

<p>Функция <code>factorial()</code> будет многократно вызывать себя, постоянно уменьшая на единицу значение аргумента "n". Этот этап рекурсии называют углублением. Процесс продолжается до тех пор, пока аргумент "n" при очередном вызове не примет значение "0". С этого момента начинается обратная фаза рекурсии - подъем. Функция возвращает значение "1", оно умножается на "2" и возвращается в более раннюю подпрограмму, где умножается на "3" и так далее, пока параметр "n" не станет равен "5" (в нашем случае).
</p>

<p>Ниже для сравнения приводится реализация функции вычисления факториала без применения рекурсии (при помощи цикла):
</p>

<example>
<kw>function</kw> factorial (n) {
    <kw>var</kw> f=<num>1</num>, i;
    <kw>if</kw> (n == <num>0</num>)
        <kw>return</kw>&#160;<num>1</num>;
    <kw>for</kw> (i=<num>2</num>; i&lt;=n; i++)
        f*=i;
    <kw>return</kw> f;
}
</example>

<p>Как вы сами можете убедиться, при использовании рекурсии, код функции становится не столько проще, сколько "прозрачнее", естественнее.
</p>

</lesson>